// coding: CP866
//---------------------------------------------------------------------------
// описание функций
_f  Arr_to_Val (_i, _i);
vd  ArcWrite   (vd);
vd  CHSET      (_i);
_i  ClsFlg     (vd);
vd  CheckCSPC  (vd);
_i  Ch_in_DNBW (int,uc);
_i  Debug      (_i);
_f  divf       (_f p1, _f p2);
_i  divi       (_i p1, _i p2);
vd  DPrn       (_i,_i,uc *, ...);
_i  DrawSPRKNP (_i);
_i  DRV_TCP    (_i);
vd  FARNRd     (vd);
vd  FARVW      (vd);
vd  FV_Set     (_i);
vd  FVMarkCurRec(vd);
_i  FillCMD    (_i);
_i  FillPRN    (_i);
_i  gDiskFree  (_i);
_i  GisScr     (vd);
_i  GetTime    (_i);
vd  GetXYEL    (_i);
_i  Init_CFG   (_i);
_i  Mexit      (_i,_i);
vd  MDraw_Box  (_i, _i, _i, _i, _i, _i, _i, _i);
vd  MesAUTH    (_i, _i);
vd  MenuStrOUT (vd);
vd  MDraw_Shk  (_i);
vd  MLoad_PIC  (_i);
_i  MLoad_Spr  (_i,_i,_i,_i);
uc  PrnInit    (vd);
uc  PrnStat    (vd);
uc  PrnStr     (uc*, _i);
_i  RARead     (_i,_i);
_i  Read_Cfg   (vd);
_i  Read_CHB   (vd);
_i  RunPRG     (_i);
vd rMessageOut (vd);
vd  SelMARK    (vd);
_i  SRMenu     (_i,_i);
_i  SRSelect   (_i,_i);
vd  smPRN      (uc [SLEN],_i,_i);
vd  STR_Out    (uc*, _i, _f, _f, _f, _i);
vd  TRFill     (_i);
_i  TestMem    (size_t);
vd  ValStr     (_i, _i);
vd  VA_to_VT   (_i);
vd  ViewFile   (_i, _i);
vd  Val_to_Arr (_i,_i,_f,_i,uc);
_i  WndCmd     (_i);
_i  WPRN_Start (vd);
_i  WPRN_Write (vd);
_i  WPRN_Stop  (vd);

//---------------------------------------------------------------------------
uc   OSVER[3]={'G','W',0};

//---------------------------------------------------------------------------
   _i   VVKT_I=0;                 // определение длинны типа
//---------------------------------------------------------------------------
   _i   _DB=0;                    // переменные отладки
   _i   PDPU=0;                   // флаги нажатия PgDn, PgUp для
   _i   PUFL=0;                   // просмотра трендов
   _i   AUFL=0;                   // флаг вывода информации об авторе
   _i   AUCNT=2;                  // счетчик секунд
   _i   AUx=0;                    // счетчик текущего символа в текущей строке
   _i   AUw=0;                    // ожидание перед началом движения строки
   _i   BIOS_FUNCTIONS=0;         // флаг разрешения доступа к функциям BIOS
   _i   CodusDirectScr=0;         // Флаг вывода строк сразу на экран
//---------------------------------------------------------------------------
   _i   ExitBAD=0;                // флаг неправильного выхода из программы
//---------------------------------------------------------------------------
// режим графического экрана
   _i   XMAX     = 320;             // максимальные координаты экрана
   _i   YMAX     = 200;             //
   _i   VMode    = 3;               // код графического режима
   uc   GRMode[5]={0,0,0,0,0};      //
   _i   DCOLOR   = 8;               // режим цвета изображений 8бит=256цветов
   _i   GRInitF  = 0;               // флаг инициализации графического режима
   _i   CDVSync  = 0;               // флаг синхронизации граф режима и таймера
   _i   FPSLEEP  = 30;              // задержка между обновлениями экрана
   _i   SYSLEEP  = 5;               // задержка для циклов основной программы
   _i   XSpeed=2,YSpeed=2;          // скорость движения мышки (по-умолчанию=2)

struct  _diskfree_t  gDSKSP;        // структура размера диска
DWORD   thIDA;                      // дескриптор обработчика обмена по COM порту
DWORD   thIDN;                      // дескриптор обработчика обмена по NetBIOS
DWORD   thIDM;                      // дескриптор обработчика вывода мыши
DWORD   thPSC;                      // дескриптор обработчика печати экрана
HANDLE  thA, thN, thM, thC;
#ifdef  WINDOW
HWND    myWND;                      // дескрипторы окна программы
HDC     myHDC;
MSG     myMSG;
PALETTE myPAL;
PAINTSTRUCT paintStruct;
static   char szAppName[] = "CODUS";    
WNDCLASS wndclass;                  
float   of_X=0.000,  of_Y=0.000;    // отсттуп для вывода окна программы
float   sz_W=1024.0, sz_H=768.0;    // ширина и высота окна программы
UINT    TMTI, TMMS;
#endif

   _i   ARCminsz=0;                 // минимальный размер диска для начал очистки
   _i   ARChmday=0;                 // кол дней для сохранения файлов архива
   _i   ARChfdel=0;                 // за сколько дней удалять файлы за раз
   uc   ARCapath[SLEN];             // альтернт путь поиска архив файлов для чтен
   _i   HMB_Disk=0;                 // кол своб байт на диске
struct  al_ffblk  al_ffblk;         // структура информации о файле
   uc   ARCfname[MARCF+1][SLEN];    // имена файлов из каталога архива
   uc   SRTfname[SLEN];             // имена файлов из каталога архива
   _i   ARCftime[MARCF+1];          // время модификации файлов(+1 для сортировки)
   _i   SRTftime;
   _i   HourPrev=0;                 // проверка смена часа
   _i   NewSec[10];                 // флаги новой секунды
//---------------------------------------------------------------------------
// файл данных
   DATAFILE *dFnt;
   DATAFILE *dSys;
//---------------------------------------------------------------------------
   _i    CDrive=0;                 // текущий диск
   uc    CDir [SLEN];              // текущий каталог
   uc    FDir [SLEN];              // каталог размещения файлов конфигурации
   uc    FNDts[SLEN]="codus.dts";  // файл данных системный
   uc    FNDtf[SLEN]="codus.dtf";  // файл данных фонтов
   uc    FNMSG[SLEN]="codus.msg";  // файл сообщений программы
   _i    HDMSG=0;                  // номер файла сообщений программы
   _i    HSMSG=0;                  // кол-во считанных сообщений
//---------------------------------------------------------------------------
   // контрольные суммы файлов
   uc    FName[3][SLEN]={"codus.dts\0","codus.dtf\0","codus.dae\0"};
   _l    CRCod[3]      ={ 0,            0,            0   };
//---------------------------------------------------------------------------
   uc    FNDeb[SLEN]="codus.log"; // файл записи отладочной информации
   FILE *DebOut;                  // файл вывода отладочной информации
   _i    Deb[MDB];                // флаг вывода отладочной информации
   _i    CDB=0;                   // текущий элемент массива Deb[]
   uc    FNFlg[SLEN]="codus.flg"; // имя файла флага запуска программы
   _i    HDFlg=0;                 // номер файла флага запуска программы
   _i    DBUFlg=0;                // флаг записи файла архива изменений
   _i    PCCSEnable [MPCCS];      // массив разрешенных контроллеров
   _i    PCCSDisable[MPCCS];      // массив запрещенных контроллеров
   _i    HCSE=0;                  // кол-во разрешенных контроллеров
   _i    HCSD=0;                  // ...... запрещенных ...
   _i    HSRV=0;                  // кол-во контроллеров для запросов
//---------------------------------------------------------------------------
   _i    BFirst=0;                //
   _i    CFirst=0;                // текущий уровень программы
   _l    ZERO=0;                  // пустой элемент
//---------------------------------------------------------------------------
   _i    sfh=0;                   // высота сист фонта
   _i    sfl=0;                   // длинна символа сист фонта
   _i    sfx=1;                   // текущие коорд вывода сист сообщений
   _i    sfy=1;                   //
   _i    sfn=0;                   // длинна системного сообщения
//---------------------------------------------------------------------------
   PALLETE  pal;                  // палитра загруженной картинки
   PALLETE  palsav;               // сохраненная палитра
   PALLETE  palrun;               // сохраненная палитра
   BITMAP  *pcxbuf;               // буфер загруженной картинки
   BITMAP  *pcxsav;               // буфер для сохран картинки
   BITMAP  *pcxrun;               // буфер для сохран картинки выполнен програм
   BITMAP  *pcxmnu;               // буфер для сохран картинки кнопок  меню
   BITMAP  *pcxsss;               // буфер для сохран картинки области выделен
   BITMAP  *pcxval;               // буфер для сохран окна при выводе ...
   BITMAP  *pcxtmp;               // временный буфер для сохран окна
   BITMAP  *scrout;               // временный буфер для сохран экрана загрузки
   BITMAP  *scrmou;               // временный буфер для сохран экрана
   BITMAP  *scrsav;               // буфер для сохранения экрана
   BITMAP  *scrprn;               // буфер для записи экрана по PrintScrn
   BITMAP  *pcxbut;               // буфер файла кнопок
   BITMAP  *winedt;               // область редактора
   _i       ABMPSZ =0;            // размер всех bitmap-ов
   _i       LockKBD=100;          // флаг блокировки загрузки картинки
   _i       LKBD_fl=0;
   _i       mouQ1=0,mouQ2=0;      // флаг блокировки для обновления экрана мыши
//---------------------------------------------------------------------------
// файл сообщений
   _l    FHAlmR=0;
   _i    FDAlmR=0;
   uc    FNAlmR[SLEN];            // файл чтения сообщений
//---------------------------------------------------------------------------
// файл конфигурации
   _l    FHCfg=0;
   _i    FDCfg=0;
   uc    FNCfg[SLEN];             // файл конфигурации
   uc    FNCHB[SLEN];             // файл базы каналов
   uc    FNini[SLEN];             // файл начальных установок
   uc    FNSvL[SLEN];             // файл сохранения данных локального массива
   uc    FNSvP[SLEN];             // файл сохранения данных массива базы канал
   uc    FNCMD[SLEN];             // файл комманд
   uc    FNDLS[SLEN];             // файл последней записи значений изменений
   uc    FBuf [SBuf+20];          // буфер чтения файлов
//---------------------------------------------------------------------------
   uc    FNLgt[SLEN];             // файл логотипа
   _i    VWLgt=1;                 // кол  секунд показа логотипа
   _i    VWver=1;                 // флаг отображ номера версии при загрузке
   _i    VWini=1;                 // флаг отображ инициализации при загрузке
   _i    VWcol=15;                // цвет отображения строк загрузки
//---------------------------------------------------------------------------
   _i    ARCOut=0;                // номер области для файла вывода архива
   _i    ARCBuf=0;                // номер буфера  для работы с БД архива
   _i    ARCBFR=0;                // текущая запись в буфере архива
   _i    ArcFL =0;                // флаг открытия файла архива
   uc    FNArc[SLEN];             // имя файла записи архива
//---------------------------------------------------------------------------
   _i    UPDOut=0;                // номер области для файла вывода архива
   _i    UPDBuf=0;                // номер буфера  для работы с БД архива
   _i    UPDBFR=0;                // текущая запись в буфере архива
   _i    UpdFL =0;                // флаг открытия файла архива
   uc    FNUpd[SLEN];             // имя файла записи архива
   ui    UpdRecNum=0;             // номер текущей записи в БД изменений
//---------------------------------------------------------------------------
   _i    REPOut=0;                // номер области для файла вывода сообщений
   _i    REPBuf=0;                // номер буфера  для работы с БД сообщений
   _i    RepFL =0;                // флаг открытия файла отчета
   uc    FNRep[SLEN];             // имя файла записи сообщений
   _i    RepFVW=0;                // файл отображения сообщений
   uc    FNFVW[SLEN];             // имя  файла просмотра
//---------------------------------------------------------------------------
   vktuc FNTmp[SLEN];             // временный файл (для проверок)
   vktuc FNIdx[SLEN];             // имя файла индекса без расширения
   _i    FRMOut=0;                // номер области для файла отчета
   _i    FRMBuf=0;                // номер буфера для файла отчета
//---------------------------------------------------------------------------
// структура переменных памяти
   _i     TMEM=0;                 // флаг проверки памяти
   _c   * VMEM=NULL;              // переменная для проверки выделения памяти
//---------------------------------------------------------------------------
// структура сообщений
struct  LALR{
   _i   cs;                  // номер цвета символов сообщения
   _i   cg;                  // номер цвета фона
   uc   flg[SLEN];           // флаг сообщения
   uc   mes[SLEN];           // сообщение
} LALR[MALR];
   _i   HALR=0;              // количество считанных из базы сообщений
   _i   CALN=0;              // номер текущего сообщения
   _i   OpCS=15;             // номер цвета символов для вывода сообщ оператора
   _i   OpCG=0;              // номер цвета фона     для вывода сообщ оператора
   _i   MSGNUMCH [MAXMCH+1]; // номера CB[] по которым передаются номера сообщ
   _f   CBNUMMSGP[MAXMCH+1]; // 
   _i   HMSGCH=0;            // кол-во каналов номеров сообщений
   _i   AUTHNMCH [MAXACH+1]; // номера CB[] по которым передаются коды авториз
   _i   HAUTHC=0;            // кол-во каналов авторизации
//---------------------------------------------------------------------------
struct STAT{
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;                 // максимальная длинна отображаемой строки (pix)
   _i   cnt;                 // счетчик отображения строки в секундах
   _i   cnto;
   uc   str[SLEN];           // строка статуса
} STAT[2];
   _i   HSTA=0;              // флаг чтения координат из файла конфиг
   uc   STAT_str[SLEN];      // вывод сообщений для внешних функций
   _i   STAT_cnt=0;          // флаг вывода сообщений ...

struct MESS{
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;                 // максимальная длинна отображаемой строки (pix)
   _i   cnt;                 // счетчик отображения строки в секундах
   _i   cnto;
   uc   str[SLEN];           // строка статуса
} MESS[2];
   _i   HMSS=0;              // флаг чтения координат из файла конфиг
   _i   TMSS=0;              // время отображения отображения сообщений

struct YCNV{
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;                 // максимальная длинна отображаемой строки (pix)
   _i   cnt;                 // счетчик отображения строки в секундах
   _i   cnto;
   uc   str[SLEN];           // строка преобразования
} YCNV;   

typedef struct  MOUT{        // структура для преобразования
   _i   sn;
   _i   X;
   _i   Y;
   _i   cs;
   _i   cg;
   _i   lcs;
   _i   cnt;
   _i   cnto;
   uc   str[SLEN];
} MOUT;

   _i   MOUTSZ=sizeof(MOUT);
   uc   MS__sto[SLEN];
   uc   SFRM_G[7]={    '%','-','6','.', 0 ,'f', 0 };       // ввод значений
   uc   SFRM_M[7]={    '%','-','6','.', 0 ,'f', 0 };       // отобр в сообщ
   uc   SFRM_V[7]={    '%',' ','6','.', 0 ,'f', 0 };       // отобр значений
   uc   SFRM_T[7]={    '%','#','6','.', 0 ,'f', 0 };       // отобр в трендах
   uc   SFRM_A[9]={' ','%','#','0','7','.', 0 ,'f',0 };    // запис в архив
   _i   MESCnt[3]={0,0,0};
   uc   MESSWR[SLEN];
   us   STR_cs=0;                      // цвет символов строки
   us   STR_cg=0;                      // цвет фона символов строки
   us   STR_sn=0;                      // номер шрифта
   _i   STR_bw=0;                      // длинна графич примитива строки
   _i   STR_bh=0;                      // высота ...
   _i   STR_nn=0;                      // номер графического примитива
   uc   MESSCOL[SLEN];                 // записываемый цвет сообщения
//---------------------------------------------------------------------------
struct DATE{
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;
} VKDATE[2];                 // 0-глобальная, 1-локальная

struct TIME{
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;
} VKTIME[2];

   _i     HDAT=0;            // флаг чтения вывода даты
   _i     HTIM=0;            // флаг чтения вывода времени
   uc     MDate[20];
   uc     MTime[20];
   time_t TMV=0;
   struct tm *tmm;           // структура времени
   _i     tmm_seco=0;        // предыдущая секунда записи архива
   _i     tmm_houro=0;       // предыдущий час
   _i     tmm_houru=0;
   _i     tmm_mdayo=0;       // предыдущий день
//---------------------------------------------------------------------------
// счетчик циклов за тик
   _l   Loops_on_tick=0,   Empty_Loops_on_tick=0;
// счетчик циклов за секунду
   _l   Loops_on_second=0, Empty_Loops_on_second=0;
// счётчик циклов в функции таймера
   int  cn_tick=0;
//---------------------------------------------------------------------------
// коды последней нажатой клавиши клавиатуры
   _i   ACode=0, SCode=0, LCode=0, KCode=0, PCode=0, OCode=0, GVCode=0;
   _i   ECode=0, LLKey=0, SelCode=0;
   _i   XCode=0;                       // для отображения в строке статуса
//---------------------------------------------------------------------------
// управление мышкой
   BITMAP  *curb[3];                   // буфер  курсора
   _i       curn[3] ={0, 1, 2 } ;      // номера курсоров в файле dCur
   _i       curx[3] ={9, 8, 3 } ;      // фокус  курсоров
   _i       cury[3] ={0, 8, 2 } ;
   _i       curp=0;
//---------------------------------------------------------------------------
   _i   MSKey=0, MSKeyO=0, MSKeyL=0;   // коды послед нажатой клавиши мышки
   _f   MSCFL=0;                       // флаг отображения координат мышки
   _f   MSdX1=0, MSdY1=0;              // коорд отступа от верх лев угла меню
   _i   MSKP[3]={0,0,0};               // коды повтор нажатий для генерац воз
   _i   CBM_X=0, CBM_Y=0;              // запомненные координаты мышки
//---------------------------------------------------------------------------
// количество таймеров
   volatile int  TMAX=0xffff;          // максимальное значение счетчика
   volatile int  HTimer[HTIMERS];      // текущие значения таймеров
   volatile int  mTimer[HTIMERS];      // текущие значения таймеров
   volatile int  DPcnt [HTIMERS];      // массив дополнительных счетчиков
   volatile int  Count_Scrn =0;        // текущее значение счетчика
//---------------------------------------------------------------------------
// структура загрузки файлов изображений
struct  LPCX{
   _i   X;                   // начальная координата (левый верхний угол)
   _i   Y;
   _i   W;                   // длина
   _i   H;                   // высота
   _i   vw;                  // флаг отображения рисунка
   uc   fn[SLEN];            // имя загружаемого файла
}  LPCX;

struct  LWIN{
   _i   X;                   // начальная координата (левый верхний угол)
   _i   Y;
   _i   W;                   // длина
   _i   H;                   // высота
   _i   vw;                  // флаг отображения рисунка
   uc   fn[SLEN];            // имя загружаемого файла
}  LWIN[MWIN];
   _i   HWIN=0;              // количество считанных строк для загрузки...

struct  LSPR{                // загрузка одиночных спрайтов
   _i   SX;                  // начальная координата (левый верхний угол)
   _i   SY;
   _i   X;                  // начальная координата (левый верхний угол)
   _i   Y;
   _i   W;                   // длина  спрайта
   _i   H;                   // высота спрайта
   _i   vw;                  // флаг отображения рисунка
   uc   fn[SLEN];            // имя загружаемого файла
BITMAP *p;                   // буфер загруженного спрайта
}  LSPR[MSPR];
   _i   HSPR=0;              // количество считанных строк для загрузки...
//---------------------------------------------------------------------------
// структура загрузки строк
struct  LSTR{                // структура вывода строк
   _i   sn;                  // номер шрифта
   _i   X;                   // координаты вывода строки на экран
   _i   Y;
   _i   cs;                  // цвет символов
   _i   cg;                  // цвет фона
   _i   lcs;                 // длинна строки в пикселах
   _i   cnt;                 // счетчик вывода сообщения
   _i   cnto;
   uc   str[SLEN];           // строка
}  LSTR[MSTR];

struct  SSTR{                // структура прокрутки строк
   _i   X1;                  // границы прокрутки строки
   _i   X2;
   _i   hg;                  // направления прокрутки (0,1,2)
   _i   sp;                  // скорость прокрутки (0-максимальная)
   _i   st;                  // шаг прокрутки в пикселах
   _i   spc;                 // счетчик скорости
   _i   lc;                  // длинна строки в символах
   _i   lp;                  // длинна строки в пикселах
   _i   XC;                  // текущая координата строки
   uc   s1 [SLEN];           // строка скролинга одна половина и
   uc   s2 [SLEN];           // вторая половина
}  SSTR[MSTR];

   _i   vSTR[MSTR];          // флаг отображения строк
   _i   fSTR=0;              // флаг наличия на экране строк повтор вывода
   _i   HSTRC=0;             // количество считанных строк
   _i   LockSTR=0;           // флаг блокировки вывода строк
//---------------------------------------------------------------------------
// структура загрузки определения клавиш
struct  LKBD{
   _i   flg;                 // флаг выполнения
   _i   cod;                 // код нажатой клавиши
   uc   str[SLEN];           // строка выполняемой комманды
   uc   run;                 // код действия
}  LKBD[MKBD];
   _i   HKBD=0;              // количество считанных кодов
//---------------------------------------------------------------------------
// структура файлов загрузки
struct  LINI{
   uc   fn[SLEN];            // имя загружаемого файла
   _i   vw;                  // флаг отображения строк
   _i   nn;                  // номер ini файла
}  LINI[MINI];

struct  SINI{
   uc   fn[SLEN];            // имя загружаемого файла
   _i   vw;                  // флаг отображения строк
   _i   nn;                  // номер ini файла
}  SINI[MINI];

   _i   HINI=0;              // количество считанных ini записей
   _i   FNCfgLD=1;           // флаг чтения файла конфигурации
   _i   ErrINI=0;            // флаг ошибки при загрузке ini файлов
   _i   ErrCNT=0;            // флаг вывода сообщения ошибки
   uc   ErrSTR[SLEN];        // строка ошибки
   _i   BZero=0;             // переменная определяющая повторное
                             // считывание для влючения *.ini файлов без
                             // повторной переинициализации переменных
//---------------------------------------------------------------------------
struct  LRUN{
   _i   vw;                  // флаг немедленного выполнения
   uc   md;                  // режим выполнения программы 0-скрыт, 1-текст.
   uc   prg[SLEN];           // выполняемая программа
}  LRUN[MRUN];
   _i   HRUN=0;              // количество считанных ini записей
//---------------------------------------------------------------------------
   uc   PN_fn[MPN][SLEN];    // имена предыдущих  ini файлов
   uc   PN_FC[SLEN];         // первый предыдущий вызываемый ini файл
   uc   PN_CC[SLEN];         // первый текущий вызываемый ini файл
   uc   PN_FF=0;             // флаг  чтения первого файла
   uc   PN_NN[SLEN];         // буфер чтения
//---------------------------------------------------------------------------
struct  LKNP{                // структура кнопок
   _i   nn;                  // номер кнопки
   _i   vw;                  // флаг отображения
   _i   W;                   // ширина кнопки
   _i   H;                   // высота кнопки
   uc   fb [SLEN];           // имя файла кнопки
BITMAP *sp [ 3];             // спрайты кнопок
}  LKNP[MKNP];
   _i   HKNP=0;              // текущие количество кнопок для экрана

struct  LMNU{                // структура пунктов меню
   _i   vw;                  // режим
   _i   X;                   // координаты рамки меню
   _i   Y;                   //
   _i   W;                   //
   _i   H;                   //
   _i   c;                   // цвет рамки
   _i   k;                   // код действия (клавиши)
   _i   bn;                  // номер кнопки
   uc   str[SLEN];           // строка описания меню
   _i   sf;                  // флаг активизации спрайтов
   _i   bf;                  // флаг для повторного вывода кнопок
}  LMNU[MMNU];

   _i   HMNU=0;              // текущее количество пунктов меню
   _i   vmnu=0;              // номер текущего меню
   _i   vkey=0;              // флаг виртуально нажатой клавиши
   _i   zkey=0;              // код нажатой клавиши для вывода окна
   _i   akey=0;              // флаг вывода анимации при выборе меню
   _i   ReDraw=0;            // флаг внеочередной перерисовки
   _i   RKDraw=0;            // флаг перерисовки при нажатии любой клавиши
//---------------------------------------------------------------------------
// массивы драйверов
   _f   RQSERCNT=0;          // кол-во запросов  CBL[24]
   _f   TOSERCNT=0;          // кол-во таймаутов CBL[25]
   _f   ANSERCNT=0;          // кол-во ответов   CBL[26]
   _f   ANSERCN1=0;          //
   _i   ACSER=0;             // номер COM порта для обмена с контроллером
   _i   FLSER=0;             // флаг типа текущего канала
   _i   BDSER=115200;        // скорость обмена по COM порту
   _i   REREQS=0;            // флаг повторного запроса
   _i   REREQH=3;            // флаг повторного запроса
   _i   CurSP=0;             // номер  текущего порта
   _i   CurSO=0;             // запомненный номер порта
   _i   LPTFL=0;             // флаг при использовании порта принтера
   _i   SPHREQ=2;            // кол-во запросов для PCCS за один раз
   _i   NBWLANA=-1;          // внутренний номер стевого адаптера для Windows

   _i   FLNBW=0;
   _i   FLTCP=0;
   _i   STSER=0;             // статус работы сети по COM порту
   _i   STNBW=0;             // статус работы сети по NETBIOS
   _i   STNBO=40;
   _i   STTCP=0;             // статус работы сети по TCPIP
   _i   EKNBWCNT=0;          // счетчик запросов NBW после смены экрана
   _i   EKNBWREQ=5;          // кол-во пропускаемых запросов после см экрана

   _i   NBWAI=1;             // флаг ожидания завершения сброса кода ошибки
   _i   NBWTO=100;           // кол-во циклов для счета таймаута обмена NBW
   _i   NBFRQ=1000;          // частота запросов по сети NetBIOS в циклах
   _i   NBWS=MWS;            // номер и имя данной рабочей станции
   uc   NMWS[16]={'A','R','G','@','@','S','9','9',0,0,0,0,0,0,0,0};
   _i   LDRV=0;              // флаги включения драйверов

   _f   CBL [MLOC];          // массив текущих значений локального драйвера
   _i   DLOC[MLOC];          // массив номеров каналов для локального драйв
   _i   HLOC=0;              // текущий элемент в локальном массиве

   _f   CBS [MSER];          // массив каналов обмена по COM порту
   _i   FSRS[MSER];          // флаг установки новых значений на OUT каналах
   _i   DSER[MSER];          // номера каналов в массиве CB[]
   _i   NSER[MSER];          // номера удаленных станций
   _i   SSER[MSER];          // номера каналов на удаленной станции
   _i   ESER=0;              // кол-во элементов COM драйвера в архиве
   _i   HSER=0;              // кол-во элементов в массиве драйва COM
   _i   SSTAT=0;             // статус драйвера COM порта (1-рабочий,0-нет)
   _i   SERRR=0;             // счетчик ошибок драйвера COM порта

   _i   CCSER=0;             // текущий канал для запроса
   _i   CSSER=0;             // текущий канал для запроса на установку
   uc   COMWSNum[2]={0,0};   // номер станции для обмена по COM порту

   _f   CBN [MNBW];          // массив каналов обмена по NetBIOS
   _i   FNBS[MNBW];          // флаг установки новых значений на OUT каналах
   _i   DNBW[MNBW];          // номера каналов  в массиве CB[]
   _i   NNBW[MNBW];          // номера удаленных  станций
   _i   SNBW[MNBW];          // номера каналов на удаленной станции
   _i   ENBW=0;              // кол-во элементов NBW драйвера в архиве
   _i   HNBW=0;              // количество элементов в массиве драйва NB
   _i   CNBQ=0;              // текущий элемент
   _i   NSTAT=0;             // статус драйвера NetBIOS (1-рабочий,0-нет)
   _i   NERRR=0;             // счетчик ошибок драйвера NetBIOS
   _i   CBCMD=0;             // флаг разрешения добавления каналов из коммандного файла

   _f   CBT [MTCP];
   _i   FTPS[MTCP];          // флаг установки новых значений на OUT каналах
   _i   DTCP[MTCP];          // массив номеров каналов для драйва TCP/IP
   _i   NTCP[MTCP];          // номера каналов удаленной станции
   _i   STCP[MTCP];          // номера каналов на удаленной машине
   _i   ETCP=0;              // кол-во элементов TCP драйвера в архиве
   _i   HTCP=0;              // количество элементов в массиве драйва TCP/IP
   _i   CTPQ=0;              // текущий элемент
   _i   TSTAT=0;             // статус драйвера  TCP (1-рабочий,0-нет)
   _i   TERRR=0;             // счетчик ошибок драйвера TCP/IP

   _i   TCP_addr_nb[MPCCS];         // NetBIOS адрес контроллера в сети
   uc   TCP_addr_ip[MPCCS][SLEN];   // IP адрес контроллера
   _i   TCP_port_rq[MPCCS];         // Номер TCP порта на контроллере для ожидания запроса
   _i   HPCCS=0;

   uc   tmpcc[3]={0,0,0};    // временная переменная для преобразования

   _i   SRV_NUM[MWS];        // номера определённых в проекте контроллеров по порядку
   _i   HOWC[MWS+1];         // кол-во запрашиваемых каналов для каждого контроллера
   _i   RCHN[MWS+1][MTCP];   // номера каналов на контроллерах
   _i   SCHN[MWS+1][MTCP];   // номера каналов на локальном компьютере (CB[])
   _i   RSRV[MTCP];          // номера контроллеров для каждого канала
   _i   HOWE[MWS+1];         //
//---------------------------------------------------------------------------
// структура каналов обмена
struct  CB{
   uc   nm[SLEN];            // имя канала
   _i   ar;                  // признак записи значений канала в архив
   _i   dt;                  // тип драйвера   (0-лок,1-COM,2-NB,3-TCP)
   _i   dn;                  // номер порта,станции
   _i   dd;                  // номер переменной на удаленной станции
   _i   t;                   // тип переменной (1-вход,2-выход,3-вход/выход)
   _i   dc;                  // количество цифр после запятой
   _f   l;                   // нижняя граница
   _f   h;                   // верхняя граница
   uc   rm[SLEN];            // комментарий
   _f   v;                   // значение канала
}  CB[MCH];
   _i   CBSN=0;              // номер переменной в общем массиве CB[],CBFL[]
   _i   CBSF[MCH];           // флаг передачи по СОМ порту для общего массива

   _i   CBDN[MCH];           // номера в массиве драйвера NETBIOS
   _i   CBSR[MCH];           // номера в массиве драйвера COM порта
   _i   CBTP[MCH];           // номера в массиве драйвера TCP
   _i   HCB=0;               // текущее количество установленных каналов базы
   _i   CCB=0;               // номер текущей переменной
   uc   IC[MIC][SLEN];       // включаемые файлы локальных баз каналов
   _i   HIC=0;               // колич включаемых локальных файлов
//---------------------------------------------------------------------------
// структура функции разбора буфера считанного файла
typedef union CVT{
   _i   i;                   // переменная типа int
   _l   l;                   //                 long
   _f   f;                   //                 float
   uc   c[SLEN+1];           //                 char*
} CVT;
//---------------------------------------------------------------------------
   _l   lca=0;               // счетчик текущего символа в буфере счит файла
   _i   lcs=0;               // текущий шаг в секции
   _i   lcz=0;               // счетчик текущ символа в строке преобразования
   _i   lcl=0;               // флаг начала строки и комментария
   uc   lcc[CVTLEN];         // строка преобразования
   uc   lcsec=0;             // текущая секция
   _i   lcstr=0;             // флаг разбора строковой переменной
   _i   LNstr=0;             // флаг продолжения строки
   uc   lcsok[SLEN];         // разрешенные секции
   _f   rvl[4];              // определен значен при действиях в строк команд
//---------------------------------------------------------------------------
// структура отображения каналов
struct  LVAL{
   _i   vw;                  // флаг отображения
   _i   na;                  // номер массива
   _i   nv;                  // номер канала
   _i   dc;                  // количество знаков после запятой
   _i   zn;                  // признак отображение знака
   _i   X;                   // координаты вывода переменной
   _i   Y;
   _i   W;                   // максимальная длинна строки в пикселах
   _i   cs;                  // цвет символов
   _i   ce;                  // цвет символов при выходе за границы
   _i   cg;                  // цвет фона
   _i   sn;                  // номер шрифта
   uc   sf [SLEN];           // строка формата вывода числа
   uc   str[SLEN];           // строковое представление переменной
   _i   cc;                  // текущий цвет символов (cs или ce)
}LVAL[MVAL];
   _i   CNVL=0;              // номер текущей записи в массиве LVAL[]
   _i   HVAL=0;              // текущ кол-во переменных отображения
   uc   SVAL[SLEN];
//---------------------------------------------------------------------------
// структура отображения гистограмм
struct  LGST{
   _i   na;                  // номер массива
   _i   nv;                  // номер  отображаемого канала
   _f   min;                 // минимальное значение канала
   _f   max;                 // максимальное ...
   _i   X;                   // координаты левого верхнего угла
   _i   Y;                   //
   _i   W;                   // длинна и высота гистограммы
   _i   H;                   //
   _i   n;                   // направление вывода (0-по X, 1-по Y)
   _i   cg;                  // цвет фона гистограммы
   _i   cs;                  // цвет вывода гистограммы
   _i   b;                   // признак рамки
   _i   cb;                  // цвет рамки
}LGST[MGST];
   _i   HGST=0;              // текущ кол-во отображаемых гистограмм
//---------------------------------------------------------------------------
// структура отображения трендов
struct  LTRD{
   _f   min;                 // минимальное значение канала
   _f   max;                 // максимальное ...
   _f   X1;                  // координаты левого нижнего угла (фон)
   _f   Y1;                  //
   _f   W1;                  // длинна тренда
   _f   H1;                  // высота тренда
   _f   X2;                  // координаты левого нижнего угла (поле тренда)
   _f   Y2;                  //
   _f   W2;                  // длинна тренда
   _f   H2;                  // высота тренда
   _i   fs;                  // номер шрифта для вывода шкалы
   _i   ft;                  // номер шрифта для вывода времени
   _i   sec;                 // количество записей в тренде
   _f   stx;                 // количество линий сетки по оси X
   _f   sty;                 // количество линий сетки по оси Y
   _i   rsa;                 // шаг чтения записей из архива
   _i   hm;                  // сколько значений отображать в одной строке
   _i   g1;                  // цвет фона
   _i   g2;                  // цвет поля тренда
   _i   cs;                  // цвет сетки тренда
   _i   cx;                  // цвет вывода времени
   _i   cy;                  // цвет вывода шкалы
   _i   cr;                  // цвет линии временного среза
   _i   th;                  // толщина линий графиков тренда
   uc   m[MTRG][SLEN];       // имена отображаемых переменных (каналов)
   _i   n[MTRG];             // номера отображаемых переменных
   _i   c[MTRG];             // цвета отображаемых переменных
   _i   z[MTRG];             // знак для корректировки вывода графика
   _f   v[MTRG];             // значение корректировки вывода графика
   _f   mind;                // запомненная величина нач шкалы MIN
   _f   maxd;                // запомненная величина нач шкалы MAX
   _f   mino;                // запомненная величина для переключений
   _f   maxo;                //
   _i   seco;                // запомненное количество секунд в тренде
   _i   rst;                 // текущее значение шага вывода тренда
}LTRD[MTRD];
   _i   HTRD=0;              // текущ кол-во отображаемых трендов
   _i   mTRDS=0;             // флаг режима изменения шага по шкале тренда
   _i   mTRDZ=0;             // флаг режима отображения шкалы(диапаз) тренда
   _i   TRFF[MTRD];          // флаги первого заполнения трендов
   _i   TMST=0;              // время старта программы
   _i   TIMF=0;              // текущее время одной цифрой
   _i   CMS1=0, CMS2=0;      // проверка времени старта программы
//---------------------------------------------------------------------------
// каналы архивации
   _i   arc_tp=0;                 // тип архива 0-CODUS
   _i   arc_ch[arc_max];          // номера архивируемых каналов
   _l   arc_bc=0;                 // номер позиции в буфере архивных значений
   _i   arc_rsize=0;              // размер одной записи архива
   _i   arc_hw=0;                 // флаг записи заголовка
   _i   HARC=0;                   // текущее количество записей архивации
   uc   AW_C[15]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   uc   AW_V[5]={0,0,0,0,0};
//---------------------------------------------------------------------------
   _i   upd_ch[upd_max];          // номера  изменяемых каналов
struct  upd_ls{                   // последние значения изменяемых каналов
   _i   yea;
   _i   mon;
   _i   day;
   _i   hou;
   _i   min;
   _i   sec;
   _i   no;
   _i   crc;
   _i   vv[upd_max];
} upd_ls;
   _i   HUPD=0;                   // текущее количество изменяемых каналов
//---------------------------------------------------------------------------
// переменные отображения трендов и архивов
struct  RABuf{
   _l   pf;                  // ???
   _l   pt;                  // номер последней записи в БД архива
   _l   pr;                  // номер текущей (с конца) записи вывода тренда
   _l   po;                  // номер запомненной записи
   _l   ps;                  // текущая запись в архиве при поиске
} RABuf[MTRD];

struct  VTRD{                // структура отображения простых трендов
   struct   {
   _i   t;                   // время запуска БД
   _i   h;                   // часы записи значений каналов
   _i   m;                   // минуты
   _i   s;                   // секунды
   _f   v[MTRG];             // значения каналов для построен графика тренда
   }    s[MTRS];
} VTRD[MTRD+1];

struct  VARC{                // структура отображения архивных трендов
   struct   {
   _i   t;                   // время запуска БД
   _i   h;                   // часы записи значений каналов
   _i   m;                   // минуты
   _i   s;                   // секунды
   _f   v[MTRG];             // значения каналов для построен графика архива
   }    s[MTRS];
} VARC[MTRD+1];

struct  TF{                  // структура флагов трендов
   uc   fn[SLEN];            // имя файла активизации (индексное поле)
   _i   fl[MTRD];            // флаг смены секунды для тренда
   _i   fs[MTRD];            // флаг первого вызова тренда
   _i   st[MTRD];            // шаг движения тренда
   _i   lt[MTRD];            // текущий шаг линий среза трендов
   _i   lm[MTRD];            // режим отображения временного среза
   _i   ls[MTRD];            // количество секунд в одном шаге линии среза
   _i   gh[MTRD];            // сколько графиков отображать на текущ. тренде
   _i   ga[MTRD][MTRG];      // номера каналов для показа в трендах
   _i   an[MTRD];            // флаг активного тренда
   _i   am[MTRD];            // флаг режима активного тренда (временный)
   _i   aa[MTRD];            // флаг режима графика (Tренд-Aрхив)
   _l   sz[MTRD];            // размер (длинна) тренда (bo-eo или наоборот)
   _i   yr[MTRD];            // год текущего архива
   _i   mn[MTRD];            // месяц...
   _i   dn[MTRD];            // день...
   uc   dt[MTRD][11];        // строка даты
   uc   dl[MTRD][11];        // строка даты
   uc   tm[MTRD][ 9];        // строка времени
   uc   fa[MTRD][SLEN];      // имена файлов архивов  для трендов
   uc   fi[MTRD][SLEN];      // имена файлов индексов для трендов
   _i   fh[MTRD];            // системный номер файла архива
   _i   ff[MTRD];            // флаг открытия файла архива
   _i   ta;                  // номер активного тренда
   _i   pd[MTRD];            // флаг начального отображения тренда
   _i   hm[MTRD];            // флаг отображения значений временного среза
} TF[MTCFG];
   _i   CTC=0;               // номер конфигурации трендов текущего экрана

   _f   VTRT[(MTRD)*(MTRG)]; // значения временных срезов
   _i   trv_cc[MTRD][MTRG];  // номера каналов в VTRD для текущего  тренда
   _i   s_in_tr=0;           // элемент массива при выводе времени
                             // вывод надписи текущего режима [ T ] | [ A ]
   uc   tras[6]={'[',' ','T',' ',']',0};
   _i   TLKey=0;             // последняя нажатая клавиша при управл. трендом
   _i   trkr=0;              // вид карандашей 0-круг, 1-линия
   uc   try_max[10];         // строка шкалы
   uc   mmss[9]={0,0,0,0,0,0,0,0,0};   // вывод минут и секунд
   _i   EDat=0;              // флаг ввода даты тренда
   _i   ETim=0;              // флаг ввода начал времени тренда
   _i   TRFL=0;              // флаг отображения смещений в строке статуса
//---------------------------------------------------------------------------
//  служебные клавиши
    uc   KSH=0;                   // Shift
    uc   KCT=0;                   // Ctrl
    uc   KAL=0;                   // Alt
//---------------------------------------------------------------------------
//  переменные ввода значений
struct  LGET{
    _i  vw;                       // флаг отображения ввода
    _i  na;                       // номер массива для ввода
    _i  nv;                       // номер переменной в массиве
    _i  dc;                       // количество десятичных символов
    _i  hc;                       // количество вводимых символов
    _f  X;                        // координаты строки для ввода
    _f  Y;                        //
    _f  W;                        // максимальная длина отображения в пиксел
    _i  cs;                       // номер цвета шрифта
    _i  cr;                       // номер цвета курсора
    _i  cg;                       // номер цвета фона
    _i  sn;                       // номер шрифта
    uc  sf [SLEN];                // строка формата вывода числа
}   LGET [MGET];
    _i    HGET=0;                 // количество определенных строк ввода

struct VGET{
    uc pr[GLEN];                  // строка для ввода
    _i vi;                        // значение для типа int
    _f vf;                        // значение для типа float
    _f XC[GLEN];                  // координаты курсора
    uc vs[GLEN];                  // значение для типа char
}   VGET [MGET];

    // таблица символов ввода чисел
    uc    LGS[MSYM]={'1',  '2',  '3',  '4',  '5',
                     '6',  '7',  '8',  '9',  '0',
                     '.',  '.',  '.',  '-',  '-',
                     '1',  '2',  '3',  '4',  '5',
                     '6',  '7',  '8',  '9',  '0',  '+',  '+' };
    _i    LGC[MSYM]={KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,
                     KEY_6,KEY_7,KEY_8,KEY_9,KEY_0,
                     KEY_COMMA,KEY_STOP,KEY_DEL_PAD,KEY_MINUS,KEY_MINUS_PAD,
                     KEY_1_PAD,KEY_2_PAD,KEY_3_PAD,KEY_4_PAD,KEY_5_PAD,
                     KEY_6_PAD,KEY_7_PAD,KEY_8_PAD,KEY_9_PAD,KEY_0_PAD,
                     KEY_EQUALS, KEY_PLUS_PAD };
    // таблица ввода русских символов
    uc    RUC[MRUC]={'Й','Ц','У','К','Е','Н','Г','Ш','Щ','З','Х','Ъ',
                     'Ф','Ы','В','А','П','Р','О','Л','Д','Ж','Э',
                     'Я','Ч','С','М','И','Т','Ь','Б','Ю','Ё',
                     'й','ц','у','к','е','н','г','ш','щ','з','х','ъ',
                     'ф','ы','в','а','п','р','о','л','д','ж','э',
                     'я','ч','с','м','и','т','ь','б','ю','ё','1','1','1','1'};
    uc    RUN[MRUC]={ 81, 87, 69, 82, 84, 89, 85, 73, 79, 80,123,125,
                      65, 83, 68, 70, 71, 72, 74, 75, 76, 58, 34,
                      90, 88, 67, 86, 66, 78, 77, 60, 62, 63,
                     113,119,101,114,116,121,117,105,111,112, 91, 93,
                      97,115,100,102,103,104,106,107,108, 59, 39,
                     122,120, 99,118, 98,110,109, 44, 46, 47, 1, 1, 1, 1};

    _i    LGET_en=0;              // флаг разрешения ввода
    _i    LGET_st=0;              // номер текущей строки ввода
    _i    LGET_el=0;              // номер текущего элемента для ввода(ред)
    _i    LGET_eo=0;              // номер предыдущ элемента для ввода(ред)
    _i    LGET_rn=0;              // флаг очередности
    _i    GKey   =0;              // последняя нажатая клавиша ввода
    _f    GX1    =0;              // координаты курсора
    _f    GX2    =0;

struct {
    _i    FL;                     // флаг активизации функции ввода строк
    uc    ES[SLEN];               // строка ввода
    _i    LS;                     // длинна строки в символах

    _f    RX1;                    // координаты вывода ввода зарисовка
    _f    RY1;
    _f    RX2;
    _f    RY2;
    _f    TX;                     // координаты вывода ввода текст
    _f    TY;

    _f    RDX1;                   // координаты вывода ввода даты трендов
    _f    RDY1;                   // (зарисовка прямоугольников)
    _f    RDX2;
    _f    RDY2;
    _f    TDX;                    // координаты вывода ввода даты трендов
    _f    TDY;

    _f    RTX1;                   // координаты вывода ввода времени трендов
    _f    RTY1;                   // (зарисовка прямоугольников)
    _f    RTX2;
    _f    RTY2;
    _f    TTX;                    // координаты вывода ввода времени трендов
    _f    TTY;

    _f    RDXV1;                  // координаты вывода ввода даты файлов
    _f    RDYV1;
    _f    RDXV2;
    _f    RDYV2;
    _f    TDXV;                   // координаты вывода ввода даты файлов
    _f    TDYV;

    _f    RFXV1;                  // координаты вывода ввода поиска
    _f    RFYV1;
    _f    RFXV2;
    _f    RFYV2;
    _f    TFXV;                   // координаты вывода ввода поиска
    _f    TFYV;

    _f    W;
    _i    sn;                     // номер шрифта
    _i    cs;                     // цвет символов
    _i    cg;                     // цвет фона
    _i    cc;                     // цвет курсора
    uc    sf[SLEN];               // строка формата ввода
    _i    fe;                     // 1-ввод даты тренд, 2-ввод времени тренд
                                  // 3-ввод даты отчет, 4-ввод поиска в файле
}   GS;

//---------------------------------------------------------------------------
//  изменение значений каналов
struct    LXCV{
    _i    na;                     // номер массива
    _i    nv;                     // номер переменной
    _i    zn;                     // знак
    _f    vc;                     // значение или номер формулы
} LXCV   [MXCV];
    _i    HXCV=0;                 // количество прочитанных описаний
//---------------------------------------------------------------------------
//  отображение файлов
struct    LFVW{
    _i    vw;                     // флаг отображения
    _f    X;                      // коорд левого верхнего угла
    _f    Y;                      //
    _f    W;                      // длинна окна отображения файла
    _f    H;                      // высота окна
    _f    L;                      // отступ слева для вывода текста (пикселы)
    _f    R;                      // отступ справа для вывода текста(пикселы)
    _i    ps;                     // флаг отображения позиции в файле
    _i    fd;                     // флаг отображения строки поиска
                                  // (при установленном данном флаге-это отчет)
    _i    ws;                     // номер строки  для поиска
    _i    spp;                    // количество строк для печати на странице
    _i    sn;                     // номер шрифта  для отображения файла
    _i    cs;                     // цвет символов для отображения файла
    _i    cg;                     // цвет фона
    uc    fn[SLEN];               // имя файла для отображения
    _i    cd;                     // цвет вывода даты
    _i    cc;                     // цвет курсора
    _i    cr;                     // цвет рамки
    _i    cp;                     // цвет отображения рамки позиции
    _f    yt;                     // отступ от верхнего края для вывода времени
    _i    f1;                     // номер первого выводимого поля 1=1
    _i    f2;                     // номер второго ...
    _i    xc;                     // цвет XOR для выдел текущ записи отобр файл
    _i    xx;                     // смещение X выделения от начала строки
    _i    xy;                     // смещение Y выделения от начала строки
    _i    xw;                     // длинна выделения
    _i    xh;                     // высота выделения
    _i    kl;                     // генерир код клавиш при нажат лев  кн мышки
    _i    kr;                     // генерир код клавиш при нажат прав кн мышки
    uc    dt[11];                 // строка даты файла отчета
    uc    dl[11];                 // строка предыдущей даты файла отчета
} LFVW   [MFVW];
    _i    HFVW=0;                 // текущее колич отображ файлов на экране

struct    VW{
    uc    fbr[SBuf];              // буфер чтения
    _i    scs;                    // цвет символов строк файла отчета
    _i    scg;                    // цвет фона...
    _i    fhd;                    // идентификаторы файлов
    _i    ffl;                    // флаги открытия файлов
    _i    hst;                    // сколько строк умещается в окне отображ
    _i    hhs;                    // высота шрифта
    _f    fcp;                    // позиция шкалы
    _f    fcz;                    // ...
    _l    fps;                    // текущая позиция в файле
    _l    fpo;                    // предыдущая позиция в файле
    _l    fpp;                    // запомненная позиция перед поиском
    _i    fhp;                    // количество страниц файла
    _l    lps;                    // количество прочитанных байт
    _l    hbr;                    // сколько байт прочитано
    _l    fsz;                    // размер файла
    uc    fst[SLEN];              // строки поиска
}   VW   [MFVW];

struct    LFVB{                   // структура измен БД отображ актив окна
    _i    dbf;                    // номер БД
    uc    fld[SLEN];              // имя изменяемого поля
    uc    val[SLEN];              // устанавливаемое значение
}   LFVB [MFVB];
    _i    HFVB=0;                 // кол-во определенных установок

    uc    FVSSTR[SLEN];           // строка формирования отображаемых записей
    uc    FVFLD1[SLEN];           // поля формирования строки отображения
    uc    FVFLD2[SLEN];
    uc    FVCOLR[SLEN];           // цвет выводимой строки
    _i    FVCode=0;               // код послед нажатой клавиши для просмотра
    _i    FVCodL=0;               // код послед нажатой клавиши для просмотра
    _i    FVA=0;                  // номер активного окна просмотра
    _i    FVE=0;                  // флаг дополнительного смещения
    _i    CDY=0;                  // год проверяемой даты (после ввода)
    _i    CDM=0;                  // месяц
    _i    CDD=0;                  // день
    _i    CTH=0;                  // часы для проверки ввода
    _i    CTM=0;                  // минуты
    _i    CT1=0;                  // секунды
    _i    FVW_Add=0;              // флаг добавления нового сообщения в файл
                                  // сообщений
    _i    FTC=0;                  // флаг старта поиска времени
    _i    RASSt =0;               // флаг последнего чтения буфера архива
    _i    RAStE =0;               // числовое представление времени ввода
    _i    RASAT =0;               // номер активного тренда для поиска
    _i    RASFS =0;               // количество записей БД архива
//---------------------------------------------------------------------------
//  рисование графических примитивов
struct LBOX{
    _i    vw;                     // флаг отображения
    _i    X;                      // коорд верх правого угла
    _i    Y;                      //
    _i    W;                      // ширина
    _i    H;                      // высота
    _i    f;                      // дополнительный флаг
    _i    cs;                     // цвет примитива
    _i    n;                      // номер примитива (фигуры)
} LBOX[MBOX];
    _i    HBOX=0;                 // кол-во определенных примитивов
//---------------------------------------------------------------------------
//  очистка экрана заданным цветом при смене экранов
struct LZRO{
    _i    X;                      // начальная координата очистки экрана
    _i    Y;                      // (верхний левый угол)
    _i    W;                      // длинна экрана очистки
    _i    H;                      // высота экрана очистки
    _i    cs;                     // цвет очистки
} LZRO;
    _i    HZRO=0;
//---------------------------------------------------------------------------
//  кодировка/декодировка строк
    _s    ECBuf[PBuf];            // кодированный буфер
    uc    DCBuf[PBuf];            // декодированный буфер
    uc    MDEC[MDST][SLEN];       // строка сообщения
    uc    astr[SLEN+2];           // строка вывода информации об авторе
//---------------------------------------------------------------------------
//  шкалы
struct LSHK{
    _f    X;                      // начальная координата шкалы
    _f    Y;                      // (верхний левый угол)
    _f    W;                      // длинна шкалы
    _f    H;                      // высота шкалы
    _f    mn;                     // минимальное  значение
    _f    mx;                     // максимальное значение
    _i    h;                      // количество частей
    _i    fl;                     // флаг вывода
    _i    dc;                     // количество символов дробной части
    _i    G;                      // направление шкалы
    _i    sn;                     // номер шрифта
    _i    cs;                     // цвет символов
    _i    cg;                     // цвет фона
    _c    fr[10];                 // формат вывода цифровой шкалы
} LSHK[MSHK];
    _i    HSHK=0;
//---------------------------------------------------------------------------
    _i    EnbA=0;                 // Debug(70)- разрешение изменения значений
//---------------------------------------------------------------------------
// области переходов
struct LSEL{
    _i    X;                      // координаты левого правого угла
    _i    Y;                      //
    _i    W;                      // ширина и высота области
    _i    H;                      //
    _i    k;                      // генерируемый код клавиши при нажатии...
    _i   sp;                      // номер спрайта
    _i   sx;                      // сдвиг спрайта по оси X (можно с минусом)
    _i   sy;                      // сдвиг спрайта по оси Y (можно с минусом)
    _i   cs;                      // цвет выделения области для операции XOR
    uc    str[SLEN];              // строка описания (в строку статуса)
} LSEL[MSEL+1];
    _i    ASEL=0;                 // номер активной области
    _i    HSEL=0;                 // текущее количество определенных областей
    _i    FSLC=0;                 // флаг сохранения начального экрана области
    _i    FSLO=0;                 // ...
    _i    FSLF=0;                 // флаг первого сохранения области спрайта
    _i    FSLB=0;
    _i    FLSEL=0;                // флаг перерисовки обрастей
//---------------------------------------------------------------------------
// выделяемые области
struct LSLM{
    _i    na;                     // номер массива
    _i    nv;                     // номер переменной в массиве
    _i    X;                      // координаты левого правого угла
    _i    Y;                      //
    _i    W;                      // ширина и высота области
    _i    H;                      //
    _i    np;                     // номер фигуры (0-нет,1-прямоуг,2-круг)
    _i    md;                     // режим закрашивания
    _f    vl;                     // нижняя  граница значения
    _f    vh;                     // верхняя граница значения
    _i    cl;                     // цвет для нижней границы
    _i    cn;                     // цвет нормального значения
    _i    ch;                     // цвет для верхней границы
    _i    co;                     // цвет выделения предыдущего цикла
    _i    fl;                     // флаг цикла
} LSLM[MSLM];
    _i    HSLM=0;                 // текущее количество определенных выделений
//---------------------------------------------------------------------------
// отчеты
struct LREP{
    _i    nn;                     // текущий номер описания отчета
    _i    na;                     // номер массива переменной управления
    _i    nv;                     // номер переменной управления в массиве
    uc    ff[SLEN];               // файл формы отчета
    uc    fo[SLEN];               // файл в который генерируется отчет
    uc    ss[MSREP][SLEN];        // строки файла формы
} LREP[MREP];

    _i    HREP=0;                 // количество определенных отчетов
    _i    FRDR=0;                 // системный номер читаемого файла формы
    uc    BRep[PBuf];             // буфер чтения файла отчета
//---------------------------------------------------------------------------
//  структура вводимых рабочих строк
struct {
    _i    X;                      // координаты левого верхнего угла
    _i    Y;
    _i    W;                      // длинна строки в пикселах
    _i    LS;                     // длинна строки в символах
    _i    sn;                     // номер шрифта ввода строки
    _i    cs;                     // цвет символов
    _i    cg;                     // цвет фона
    _i    cc;                     // цвет курсора
    _i    kb;                     // код генерируемой клавиши после нажат ENTER
    uc    sf[SLEN];               // строка формата
    uc    ES[SLEN];               // строка данных
} LSTT[MSTT];
    _i    HSTT=0;                 // кол-во рабочих строк
    _i    CSTT=0;                 // номер текущей структуры
//---------------------------------------------------------------------------
//  структура экранов
struct {
    _i    X;                      //
} LERK[MEKR];
    _i    HEKR=0;                 // кол-во экранов
    _i    CEKR=0;                 // номер текущего экрана
//---------------------------------------------------------------------------
//  структура условных комманд в коммандных файлах
struct {
    uc    cmd[SLEN];              // комманда
    _f    v1;                     // операнд 1
    uc    zn[SLEN];               // знак операции
    _f    v2;                     // операнд 2
} LCIF;
    _i    FLCIF=0;                // флаг разрешения чтения комманд
    _i    FLCWa=0;                // счетчики текущего положения в буфере
    _l    FLCWlca=0;              // прочитанного файла
    _i    HNEXT=0;                // счетчик количества циклов
    _i    MNEXT=100;              // максимальное количество циклов
//---------------------------------------------------------------------------
//  структура вывода выбора из файла
struct {
    _i    na;                     // номер массива
    _i    nv;                     // номер перемен в массиве
    _i    X;                      // начальная координата вывода выбранной строки
    _i    Y;                      //
    _i    W;                      // максимальная длинна строки в пикселах
    _i    sn;                     // номер шрифта вывода строк
    _i    cs;                     // номер цвета символов
    _i    cg;                     // номер цвета фона
    _i    rf;                     // флаг очистки области под строкой
    _i    rh;                     // значен корректир высоты обл под строкой
    uc    fn[SLEN];               // файл со строками выбора
}  LFST;
    _f    VFST[MCST];             // массив ожидаемых значений
    uc    SFST[MCST][SLEN];       // массив строк, соответствующих значениям
    uc    FFST=0;                 // флаг чтения файла строк вывода выбора
    _i    HFST=0;                 // количество считанных строк
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
struct {                                    // структура индекса
   ui  TIM   __attribute__((packed));       // 4 время фиксирования записи
   ui  nREC  __attribute__((packed));       // 4 номер записи
} IDXTIM[MRECI];

struct {                                    // структура индекса для поиска
   ui  TIM   __attribute__((packed));       // 4
   ui  nREC  __attribute__((packed));       // 4
} IDXSER[MRECI];

   ui  IDXCUR=0;                            // Колич записыв элементов индекса
   ui  IDXCNT=0;                            // Текущ элемент индекса для записи
   ui  IDXCURS=0;                           // Считан колич элемет индек поика
   ui  ArcRecNum=0;                         // номер текущей записи в архиве

// [0] -  номер текущей записи индекса
// [1] -  счетчик записи индекса на диск
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// структура установок принтера и сохранения экрана
struct {
    _i    port;                   // номер порта принтера 1-LPT1
    uc    fn[SLEN];               // имя файла описаний ESC послед принтера
    _i    ws;                     // рабоч строка с имен файла для сохр экрана
    _i    X;                      // область экрана для записи(печати)
    _i    Y;
    _i    W;
    _i    H;
}   SPRN;

    DWORD       PRN_DW;
    HDC         hdcPrint;
    DOCINFO     doci;
    TEXTMETRIC  txtm;
    HFONT       hFont, hOldFont;
    JOB_INFO_2  JobInfo;

// ESC коды для работы с принтером
    _i    PRN_Stat=0;                       // статус открытия принтера
    _i    PRN_ScrS=0;                       // статус обработки печати экрана
    uc    PRN_Name[SLEN];                   // имя принтера
    uc    PRN_Font[SLEN];                   // имя шрифта для печати
    _i    PRN_Fchr=0;                       // CHARSET
    _i    PRN_Fsiz=100;                     // размер шрифта
    _i    PRN_Fbls=200;                     // размер толщины символов
    _i    PRN_Fitl=0;                       // наклонный
    _i    PRN_Fund=0;                       // подчеркнутый
    _i    PRN_Fsou=0;                       // зачеркнутый
    _i    PRN_Forn=0;                       // направление
    _i    PRN_Fqua=0;                       // качество шрифта
    _i    PRN_offX=100;                     // отступ слева
    _i    PRN_offY=100;                     // отступ сверху
    _i    PRN_X=0;
    _i    PRN_Y=0;

    uc    PRN_Cmd [SLEN];                   // строка комманды
    uc    PRN_Tmp [SLEN];                   // строка комманды
    uc    PRN_Ends[MPSC];                   // конец строки
    uc    PRN_Init[MPSC];                   // инициализация принтера
    uc    PRN_Ornt[MPSC];                   // ориентация страницы
    uc    PRN_Pitc[MPSC];                   // символов на дюйм
    uc    PRN_ChrH[MPSC];                   // высота символов
    uc    PRN_ChrB[MPSC];                   // толщина символов
    uc    PRN_LnSp[MPSC];                   // симв строк на дюйм
    uc    PRN_Spac[MPSC];                   // расположение пропорц/фиксир
    uc    PRN_Strn[MPSC];                   // строка вывода на принтер

    uc    FPRN[MPRN][SLEN];       // строки для печати
    _i    HPRN=0;                 // количество строк для печати
    _i    CPRN=0;                 // текущая обрабатываемая строка
    _i    FLGP=0;                 // флаг состояния печати
//  _i    PRN_Mode=0;             // режим печати
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
HANDLE      vvkEVENT;                   // указатель запуска программы
HWND        CODUSWnd;                   // указатель окна выполнения программы
HWND        CBFWnd;                     // указатель окна буфера обмена
static      HGLOBAL CBData;             // глобальная память для Clipboard
uc          CBWRBuff[SLEN];             // строка передачи данных в буфер обмена
uc          CBSCBuff[15];               // вторая строка
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
    uc    LDIR[MDIR][SLEN];       // опреления строковых макросов (замен)
    _i    HDIR=0;                 // количество определенных строковых замен

    _i    LMVLCN=0;               // номер текущего элемента при действиях
    _i    LMVLDF=0;               // флаг переопределения значения элемента
//---------------------------------------------------------------------------
//  пустая комманда 'X' для вычисления значений в файлах описаний
    _f    XRCMD=0;
//---------------------------------------------------------------------------

//----------------------------------------------------------------------------
// структура комманд
// CMD | def = |  sum + |  sub - |  mul * |  div / |
// COD | 0     |  1     |  2     |  3     |  4     |
struct  LCMD{
   uc   rcmd;                          // номер комманды
   _i   tcmd;                          // тип комманды:
                                       // 0-присвоение; 1-функция; 2-сравнение
   _i   gcmd;                          // номер конечного элемента
   _i   fcmd;                          // флаг окончания заполнения комманды
// как бы сложно не была записана комманда, ее надо разложить на
// функцию с двумя аргументами [0]-результат, [1]-аргумент 1, [2]-аргумент 2
   _i   ncmd[3];                       // номер массива
   _i   vcmd[3];                       // номер переменной в массиве
   _f   zcmd[3];                       // значения, если определена константа
   uc   scmd[SLEN];                    // строка  вывода команды на экран
} LCMD[MCMD];
   _i   HCMD =0;                       // количество прочитанных комманд
   _i   WTIF[MGIF];                    // флаги ожидания закрытия структуры IF
   _i   CCIF =0;                       // номер текущего уровня структуры IF
   uc   stmp[SLEN];                    // временная строка
//----------------------------------------------------------------------------
   _f   RTMP[MTMP];                    // массив временных переменных
   _f    YCM[MYCM];                    // массив переменных комманды 'y'
   uc   LMVL[MYCM][20];                // массив строк переменных комманды 'y'
   _i   HYCM=0;                        // количество определенных замен
//----------------------------------------------------------------------------
   uc   NCCM[MCCM][SLEN];              // массив имен  переменных
   uc   PCCM[MCCM][SLEN];              // массив макросов  замены имен
   _i   HCCM=0;                        // количество определенных имен перемен
   _i   CCCM=0;                        // номер текущего определения
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
//  структура запроса выбора оператора
struct {
    _i    nn;               // номер определения
    _i    na;               // номер массива для переменной контроля
    _i    nv;               // номер переменной в массиве
    _i    ka;               // генер сканкод клавиши при na nv > 0
    _i    k1;               // ожидаемая клавиша1
    _i    k2;               // ожидаемая клавиша2
    _i    k3;               // ожидаемая клавиша3
    _i    v1;               // значение для этой клавиши в sa sv
    _i    v2;               // значение для этой клавиши в sa sv
    _i    v3;               // значение для этой клавиши в sa sv
    _i    g1;               // генер сканкод после нажатия клавиши1
    _i    g2;               // генер сканкод после нажатия клавиши2
    _i    g3;               // генер сканкод после нажатия клавиши3
    _i    gr;               // флаг периодической генерации сканкода
    _i    fr;               // флаг выполнения запроса
} LOPQ[MOPQ];
    _i   COPQ =0;           // номер обрабатываемого запроса (по очереди)
    _i   COPK =0;           // сканкод клавиши для обработки
    _i   GOPK =0;           // генерируемый сканкод клавиши
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  переопределение координат элементов экрана
    #define  MXSFLD 30
    ui   XYMode=0;          // режим действия над элементом
    ui   El_Que=0;          // номер очередности проверки элементов (од на др)
    uc   El_Str[SLEN];      // строка описания элемента
    uc   El_SS1[SLEN];      // дополнительная строка   параметра элемента
    _i   El_SI1=0;          // дополнительное значение параметра элемента
    ui   El_Typ=0;          // тип массива элемента
    ui   El_Num=0;          // номер элемента в текущем массиве
    _i   El_NA =0;          // номер массива
    _i   El_NV =0;          // номер переменной в массиве
    _f   El_VL =0;          // текущее значение выбранной переменной просмотра
    uc   El_Nam[SLEN];      // имя переменной в общем массиве
    _i   El_Cel=0;          // номер текущего элемента в массивах
    uc   AR_Nam[SLEN];      // имя текущего массива
    _i   El_Key=0;          // код клавиши, сопаставимый с областью(или меню)
    _i   X__Old=0;          // первоначальные координаты элемента
    _i   Y__Old=0;          //
    _i   X2_Old=0;          //
    _i   Y2_Old=0;          //
    _i   W__Old=0;          //
    _i   H__Old=0;          //
    _i   El_Brd=0;          // флаг вывода рамки для выделения элемента
    _i   El_BAL=0;          // флаг вывода рамок для выделения всех элементов
    _i   X__New=0;          // новые координаты элемента
    _i   Y__New=0;          //
    uc   FirstINI[SLEN];    // имя первого ini-файла вызываемого экрана
    uc   El_CSS[SLEN*2];    // строка текущей комманды при разборе ini-файла
    uc   El_CSO[SLEN*2];    // предыдущая строка текущей комманды  ini-файла
    uc   El_CSF[MXSFLD+1][SLEN]; // поля текущей строки
    _i   El_FLD=0;          // счетчик полей в строке
    _i   El_UND=0;          // флаг для восстановления
    _i   El_UTp=0;          // тип элемента восстановления
    _i   X__UnO=0;          // координаты восстановления элемента экрана
    _i   Y__UnO=0;          //
    _i   X__UnN=0;          //
    _i   Y__UnN=0;          //
    uc   El_ifn[MINI][SLEN];// имена загружаемых ini-файлов
    _i   El_inn[MINI];      // номера загружаемых ini-файлов
    _i   El_hii=0;          // количество включаемых ini-файлов
    _i   El_cii=0;          // номер текущего обрабатываемого ini-файла
    uc   El_SX1[10]={0,0,0,0,0,0,0,0,0,0}; // конвертирование текущих координат
    uc   El_SY1[10]={0,0,0,0,0,0,0,0,0,0}; // в строку
    uc   El_SXX[10]={0,0,0,0,0,0,0,0,0,0}; //
    uc   El_CCC[ 5]={0,0,0,0,0};           // текущая комманда описания элемента
    _f   El_Cyc=0;                         // отображение пустых циклов CODUS

    _i   EDT_H =62;         // высота окна редактора
    _i   EDTBC =15;         // цвет фона окна редактора
    _i   EDTFC = 1;         // цвет символов в окне редактора
    _i   EDTSN =26;         // (35) номер шрифта в окне редактора
    _i   EDTRC = 5;         // цвет рамки выделения элемента
    uc   EDTS1[SLEN*5];     // строки окна редактора
    uc   EDTS2[SLEN*5];     //
    uc   EDTS3[SLEN*5];     //
    uc   EDTS4[SLEN*5];     //

struct{
    _i   T;                 // расположение 0-сверху, 1-снизу
} LEDT;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
_i  Load_CFG   (_i,_i,CVT*);
_i  MESOut     (MOUT*,_i,_i);
//---------------------------------------------------------------------------
